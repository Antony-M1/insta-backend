"""
README


This `db.py` mainly talk about the handling the database in the fastapi framework.

Here the Doc: https://sqlmodel.tiangolo.com/tutorial/create-db-and-table-with-db-browser/#learn-more-sql

from the above document we are following the tutorial. to explore this code you have to try with the main

```
fastapi dev db.py
```
"""
from faker import Faker
from sqlmodel import SQLModel, Field, create_engine, Session, select, or_


faker = Faker()


class Hero(SQLModel, table=True):
    '''
    The id will be required in the database, but it will be generated by
    the database, not by our code.

    So, whenever we create an instance of this class (in the next chapters),
    we will not set the id. And the value of id will be None until we save
    it in the database, and then it will finally have a value.
    '''
    id: int | None = Field(default=None, primary_key=True)
    name: str = Field(index=True)
    secret_name: str
    age: str | None = None
    test1: str | None = None

sqlite_file_name = "database_v2.db"
sqlite_url = f"sqlite:///{sqlite_file_name}"

engine = create_engine(sqlite_url, echo=True)  # echo is only for learning - Print the SQL Query


def create_db_and_tables():
    SQLModel.metadata.create_all(engine)


def create_heroes():
    hero_1 = Hero(name=faker.user_name(), secret_name=faker.name())
    hero_2 = Hero(name=faker.user_name(), secret_name=faker.name())
    hero_3 = Hero(name=faker.user_name(), secret_name=faker.name(), age=faker.random_int(min=10, max=80))

    with Session(engine) as session:
        '''
        Creating the `Session` in the `with` block its really usefull
        it will automatically open and close the session, no need to
        do it manually.
        '''
        session.add(hero_1)
        session.add(hero_2)
        session.add(hero_3)

        session.commit()

        # Get the information again from the database while refresh it
        session.refresh(hero_1)
        session.refresh(hero_2)
        session.refresh(hero_3)

        # session.close()


def select_heros():
    with Session(engine) as session:
        statement = select(Hero).where(or_(Hero.age >= 35, Hero.age <= 50)).order_by()
        results = session.exec(statement)
        for hero in results:
            print(hero)


def main():
    create_db_and_tables()
    create_heroes()
    select_heros()


if __name__ == '__main__':
    main()
